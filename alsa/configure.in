dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) by Jaroslav Kysela <perex@suse.cz>

AC_INIT(kernel/sound.c)
AM_CONDITIONAL(INSTALL_M4, test "x${ACLOCAL}" = "xaclocal")
AC_PREFIX_DEFAULT(/usr)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl Checks for header files.
AC_HEADER_STDC
AC_CONFIG_HEADER(include/config.h include/config1.h include/version.h)
AC_CHECK_HEADERS(linux/fs.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl Check for directory with kernel source...
AC_MSG_CHECKING(for directory with kernel source)
AC_ARG_WITH(kernel,
  [  --with-kernel=dir       give the directory with kernel sources]
  [                        [/usr/src/linux]],
  kerneldir="$withval", kerneldir="/usr/src/linux")
AC_DEFINE_UNQUOTED(CONFIG_SND_KERNELDIR, "$kerneldir")
CONFIG_SND_KERNELDIR="$kerneldir"
AC_SUBST(CONFIG_SND_KERNELDIR)
AC_MSG_RESULT($kerneldir)

dnl Check for kernel version...
AC_MSG_CHECKING(for kernel version)
AC_CACHE_VAL(kaversion,
[AC_TRY_RUN([
#include <stdio.h>
#include <ctype.h>
#include "$CONFIG_SND_KERNELDIR/include/linux/version.h"
int main()
{
 FILE *f;
 char kversion[128];
 char kpatchlevel[128];
 char ksublevel[128];
 char kextra[128];
 char *ptr, *dptr;
#ifdef UTS_RELEASE
 f=fopen("./conftestdata","w");
 if (f) {
   for (ptr = UTS_RELEASE, dptr = kversion; *ptr != '\0' && isdigit(*ptr); ptr++, dptr++)
     *dptr = *ptr;
   *dptr = '\0';
   if (*ptr == '.')
     ptr++;
   for (dptr = kpatchlevel; *ptr != '\0' && isdigit(*ptr); ptr++, dptr++)
     *dptr = *ptr;
   *dptr = '\0';
   if (*ptr == '.')
     ptr++;
   for (dptr = ksublevel; *ptr != '\0' && isdigit(*ptr); ptr++, dptr++)
     *dptr = *ptr;
   *dptr = '\0';
   for (dptr = kextra; *ptr != '\0'; ptr++, dptr++)
     *dptr = *ptr;
   *dptr = '\0';   
   fprintf(f,"%s:%s:%s:%s\n",kversion,kpatchlevel,ksublevel,kextra);
   fclose(f);
   }
 exit(0);
#else
 exit(1);
#endif
}],kaversion=`cat conftestdata`,
kaversion="",
kaversion="")])
kversion=`echo $kaversion | cut -d : -f 1`
kpatchlevel=`echo $kaversion | cut -d : -f 2`
ksublevel=`echo $kaversion | cut -d : -f 3`
kextraversion=`echo $kaversion | cut -d : -f 4`
kversion=`expr $kversion + 0`
kpatchlevel=`expr $kpatchlevel + 0`
ksublevel=`expr $ksublevel + 0`
if test -z "$kversion" || test -z "$kpatchlevel" || test -z "$ksublevel"; then
  echo "failed (probably missing $CONFIG_SND_KERNELDIR/include/linux/version.h)"
  exit 1
fi
kaversion="$kversion.$kpatchlevel.$ksublevel$kextraversion"
AC_SUBST(kaversion)
AC_SUBST(kversion)
AC_SUBST(kpatchlevel)
AC_SUBST(ksublevel)
AC_SUBST(kextraversion)
AC_MSG_RESULT($kaversion)

dnl Check for modversions...
AC_MSG_CHECKING(for kernel module symbol versions)
modversion="0"
AC_TRY_RUN([
#include "$CONFIG_SND_KERNELDIR/include/linux/autoconf.h"
int main( void ) {
#ifndef CONFIG_MODVERSIONS
  exit(1);
#else
  exit(0);
#endif
}
],
  AC_MSG_RESULT("yes");mversion="1",
  AC_MSG_RESULT("no");mversion="0",
  AC_MSG_RESULT("unknown");mversion="0"
)
CONFIG_SND_MVERSION=$mversion
AC_SUBST(CONFIG_SND_MVERSION)
GENKSYMS="/sbin/genksyms -k $kversion.$kpatchlevel.$ksublevel"

dnl Check for PCI support...
AC_MSG_CHECKING(for PCI support in kernel)
pcisup="0"
AC_TRY_RUN([
#include "$CONFIG_SND_KERNELDIR/include/linux/autoconf.h"
int main( void ) {
#ifndef CONFIG_PCI
  exit(1);
#else
  exit(0);
#endif
}
],
  AC_MSG_RESULT("yes");pcisup="1",
  AC_MSG_RESULT("no");pcisup="0",
  AC_MSG_RESULT("unknown");pcisup="0"
)
CONFIG_SND_PCI=$pcisup
AC_SUBST(CONFIG_SND_PCI)

dnl Check for SGI/MIPS (HAL2) support...
AC_MSG_CHECKING(for SGI/MIPS (HAL2) architecture)
CONFIG_SND_SGI=0
if test -r $CONFIG_SND_KERNELDIR/include/asm/sgi/sgihpc.h; then
  CONFIG_SND_SGI=1
fi
AC_SUBST(CONFIG_SND_SGI)
if test $CONFIG_SND_SGI -eq 1; then
  AC_MSG_RESULT("yes")
else
  AC_MSG_RESULT("no")
fi


dnl Directory for modules
AC_MSG_CHECKING(for directory to store kernel modules)
AC_ARG_WITH(moddir,
  [  --with-moddir=/path     give the path for the alsa driver kernel modules]
  [                        [/lib/modules/<KVER>/misc]],
  moddir="$withval", 
# Special test for RH 5.1
  if test -d /lib/modules/preferred; then
    moddir="/lib/modules/preferred/misc"
  else
    moddir="/lib/modules/$kaversion/misc"
  fi
)
AC_SUBST(moddir)
AC_MSG_RESULT($moddir)

dnl Debug level
AC_MSG_CHECKING(for debug level)
AC_ARG_WITH(debug,
  [  --with-debug=level      give the debug level (none,basic,memory,full)],
  debug="$withval", debug="none")
case "$debug" in
  basic)
    AC_MSG_RESULT(basic)
    AC_DEFINE(CONFIG_SND_DEBUG)
    ;;
  memory)
    AC_MSG_RESULT(memory)
    AC_DEFINE(CONFIG_SND_DEBUG)
    AC_DEFINE(CONFIG_SND_DEBUG_MEMORY)
    ;;
  full)
    AC_MSG_RESULT(full)
    AC_DEFINE(CONFIG_SND_DEBUG)
    AC_DEFINE(CONFIG_SND_DEBUG_MEMORY)
    AC_DEFINE(CONFIG_SND_DEBUG_FULL)
    ;;    
  detect)
    AC_MSG_RESULT(detect)
    AC_DEFINE(CONFIG_SND_DEBUG)
    AC_DEFINE(CONFIG_SND_DEBUG_MEMORY)
    AC_DEFINE(CONFIG_SND_DEBUG_FULL)
    AC_DEFINE(CONFIG_SND_DEBUG_DETECT)
    ;;
  *)
    AC_MSG_RESULT(none)
    ;;
esac
AC_SUBST(moddir)

dnl Check processor type...
AC_MSG_CHECKING(for processor type)
processor=""
rm -f processor.id
AC_TRY_RUN([
#include <stdio.h>
#include "$CONFIG_SND_KERNELDIR/include/linux/autoconf.h"
int main(void) {
	FILE *file = fopen("processor.id", "w+");
	if (file == NULL)
		exit(1);
#if defined(CONFIG_M386)
	fprintf(file, "i386");
#elif defined(CONFIG_M486)
	fprintf(file, "i486");
#elif defined(CONFIG_M586)
	fprintf(file, "i586");
#elif defined(CONFIG_M586TSC)
	fprintf(file, "i586tsc");
#elif defined(CONFIG_M686)
	fprintf(file, "i686");
#elif defined(CONFIG_EV4) || defined(CONFIG_ALPHA_EV4)
	fprintf(file, "alpha_ev4");
#elif defined(CONFIG_EV5) || defined(CONFIG_ALPHA_EV5)
	fprintf(file, "alpha_ev5");
#elif defined(CONFIG_EV6) || defined(CONFIG_ALPHA_EV6)
	fprintf(file, "alpha_ev6");
#elif defined(CONFIG_ALPHA_GENERIC)
	fprintf(file, "alpha_generic");
#elif defined(CONFIG_ALPHA_NONAME)
	fprintf(file, "alpha_noname");
#elif defined(CONFIG_PPC)
	fprintf(file, "ppc");
#elif defined(CONFIG_CPU_R3000) || defined(CONFIG_CPU_R6000)
	fprintf(file, "mips");
#elif defined(CONFIG_CPU_R4300) || defined(CONFIG_CPU_R4X00)
	fprintf(file, "mips");
#elif defined(CONFIG_CPU_R5000) || defined(CONFIG_CPU_NEVADA)
	fprintf(file, "mips");
#elif defined(CONFIG_CPU_R8000) || defined(CONFIG_CPU_R10000)
	fprintf(file, "mips");
#else
	fclose(file);
	exit(1);
#endif
	fclose(file);
	exit(0);
}
],
  processor=`cat processor.id`;AC_MSG_RESULT($processor),
  AC_MSG_RESULT("unknown");processor="",
  AC_MSG_RESULT("unknown");processor=""
)
rm -f processor.id
c_opts=""
case "$processor" in
  i386*)
    c_opts="-m386 -DCPU=386"
    ;;
  i486*)
    c_opts="-m486 -DCPU=486"
    ;;
  i586*)
    c_opts="-m486 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=586"
    ;;
  i686*)
    c_opts="-m486 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=686"
    ;;
  alpha*)
    c_opts="-fno-strength-reduce -mno-fp-regs -ffixed-8"
    case "$processor" in
      alpha_ev5)
        c_opts="$c_opts -mcpu=ev5"
        ;;
      alpha_ev6)
        c_opts="$c_opts -mcpu=ev6"
        ;;
    esac
    processor="alpha"
    ;;
  ppc)
    ;;
  mips)
    c_opts="-mcpu=r4600 -G 0 -mips2 -fno-pic -mno-abicalls -mlong-calls"
    processor="mips"
    ;;
  *)
    processor="unknown"
    ;;
esac
c_opts="-O2 $c_opts"
AC_SUBST(processor)

dnl Check for SMP...
AC_MSG_CHECKING(for SMP)
msmp=""
AC_TRY_RUN([
#include "$CONFIG_SND_KERNELDIR/include/linux/autoconf.h"
int main(void) {
#ifndef CONFIG_SMP
	exit(1);
#else
	exit(0);
#endif
}
],
  AC_MSG_RESULT("yes");msmp="1",
  AC_MSG_RESULT("no");msmp="",
  AC_MSG_RESULT("unknown");msmp=""
)
if test "$msmp" = "1"; then
  GENKSYMS="$GENKSYMS -p smp_"
  c_opts="$c_opts -D__SMP__ -DCONFIG_SMP"
fi
AC_SUBST(msmp)

dnl Check for ISA PnP driver in kernel...
AC_MSG_CHECKING(for ISA PnP driver in kernel)
CONFIG_ISAPNP_KERNEL="0"
if test -r $CONFIG_SND_KERNELDIR/include/linux/isapnp.h; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(CONFIG_ISAPNP_KERNEL)
  CONFIG_ISAPNP_KERNEL="1"
else
  AC_MSG_RESULT(no)  
fi
AC_SUBST(CONFIG_ISAPNP_KERNEL)

dnl Check for ISA PnP support...
AC_MSG_CHECKING(for ISA PnP support)
AC_ARG_WITH(isapnp,
  [  --with-isapnp=yes,no,auto  driver will (not) be compiled with ISA PnP support],
  pnp="$withval", pnp="yes")
CONFIG_ISAPNP="0"
if test "$pnp" = "auto"; then
  if test -f /proc/isapnp; then
    CONFIG_ISAPNP="1"
  fi
else
  if test "$pnp" = "yes"; then
    CONFIG_ISAPNP="1"
  fi
fi
AC_SUBST(CONFIG_ISAPNP)
if test "$CONFIG_ISAPNP" = "1"; then
  AC_DEFINE(CONFIG_ISAPNP)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Check for version...
AC_MSG_CHECKING(for driver version)
CONFIG_SND_VERSION=`cat $srcdir/version`
AC_DEFINE_UNQUOTED(CONFIG_SND_VERSION, "$CONFIG_SND_VERSION")
AC_SUBST(CONFIG_SND_VERSION)
AC_MSG_RESULT($CONFIG_SND_VERSION)

dnl Check for sequencer support...
AC_MSG_CHECKING(for sequencer support)
AC_ARG_WITH(sequencer,
  [  --with-sequencer=yes,no  driver will (not) be compiled with sequencer support],
  sequencer="$withval", sequencer="yes")
CONFIG_SND_SEQUENCER="0"
if test "$sequencer" = "yes"; then
  CONFIG_SND_SEQUENCER="1"
fi
AC_SUBST(CONFIG_SND_SEQUENCER)
if test "$CONFIG_SND_SEQUENCER" = "1"; then
  AC_DEFINE(CONFIG_SND_SEQUENCER)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Check for OSS/Free emulation...
AC_MSG_CHECKING(for OSS/Free emulation)
AC_ARG_WITH(oss,
  [  --with-oss=no,yes       driver will (not) be compiled with OSS/Free emulation],
  ossemul="$withval", ossemul="yes")
CONFIG_SND_OSSEMUL="0"
if test "$ossemul" = "yes"; then
  CONFIG_SND_OSSEMUL="1"
fi
AC_SUBST(CONFIG_SND_OSSEMUL)
if test "$CONFIG_SND_OSSEMUL" = "1"; then
  AC_DEFINE(CONFIG_SND_OSSEMUL)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Check for which cards to compile driver for...
ALSA_CARDS_INIT
ALSA_CARDS_SELECT

dnl Some late substitutes...
c_opts="$c_opts -DLINUX"
AC_SUBST(c_opts)
AC_SUBST(GENKSYMS)

dnl Output files...
AC_OUTPUT(Makefile.conf snddevices utils/alsa-driver.spec cards.config)

dnl Make right rights for scripts
chmod 755 $srcdir/snddevices
