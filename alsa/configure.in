dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) by Jaroslav Kysela <perex@jcu.cz>

AC_INIT(kernel/sound.c)
AC_PREFIX_DEFAULT(/usr)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl Checks for header files.
AC_HEADER_STDC
AC_CONFIG_HEADER(include/config.h)
AC_CHECK_HEADERS(linux/fs.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl Major number
AC_MSG_CHECKING(for default major number for the alsa driver)
AC_ARG_WITH(major,
  [  --with-major=number     give the default major number for the alsa driver],
  majornumber="$withval", majornumber="14")
AC_DEFINE_UNQUOTED(SNDCFG_MAJOR, $majornumber)
SNDCFG_MAJOR="$majornumber"
AC_SUBST(SNDCFG_MAJOR)
AC_MSG_RESULT($majornumber)

dnl Check for directory with kernel source...
AC_MSG_CHECKING(for directory with kernel source)
AC_ARG_WITH(kernel,
  [  --with-kernel=dir       give the directory with kernel sources]
  [                        [/usr/src/linux]],
  kerneldir="$withval", kerneldir="/usr/src/linux")
AC_DEFINE_UNQUOTED(SNDCFG_KERNELDIR, "$kerneldir")
SNDCFG_KERNELDIR="$kerneldir"
AC_SUBST(SNDCFG_KERNELDIR)
AC_MSG_RESULT($kerneldir)

dnl Check for kernel version...
AC_MSG_CHECKING(for kernel version)
kaversion=`grep UTS_RELEASE $SNDCFG_KERNELDIR/include/linux/version.h 2>/dev/null | cut -d\" -f2`
kversion=`echo $kaversion | cut -d . -f 1`
kpatchlevel=`echo $kaversion | cut -d . -f 2`
ksublevel=`echo $kaversion | cut -d . -f 3`
kversion=`expr $kversion + 0`
kpatchlevel=`expr $kpatchlevel + 0`
ksublevel=`expr $ksublevel + 0`
if test -z "$kversion" || test -z "$kpatchlevel" || test -z "$ksublevel"; then
  echo "failed (probably missing $SNDCFG_KERNELDIR/include/linux/Makefile)"
  exit 1
fi
kaversion="$kversion.$kpatchlevel.$ksublevel"
newkernel="0"
if test $kversion -gt 2; then
  newkernel="1"
else
  if test $kversion -eq 2 && test $kpatchlevel -gt 0; then
    newkernel="1"
  fi
fi
AC_SUBST(kversion)
AC_SUBST(kpatchlevel)
AC_SUBST(ksublevel)
AC_SUBST(newkernel)
AC_MSG_RESULT($kaversion)

dnl Check for modversions...
AC_MSG_CHECKING(for kernel module symbol versions)
modversion="0"
AC_TRY_RUN([
#include "$SNDCFG_KERNELDIR/include/linux/autoconf.h"
int main( void ) {
#ifndef CONFIG_MODVERSIONS
  exit(1);
#else
  exit(0);
#endif
}
],
  AC_MSG_RESULT("yes");mversion="1",
  AC_MSG_RESULT("no");mversion="0",
  AC_MSG_RESULT("uknown");mversion="0"
)
SNDCFG_MVERSION=$mversion
AC_SUBST(SNDCFG_MVERSION)
GENKSYMS="/sbin/genksyms"
if test "$newkernel" = "1"; then
  GENKSYMS="$GENKSYMS -k $kversion.$kpatchlevel.$ksublevel"
fi

dnl Check for PCI support...
AC_MSG_CHECKING(for PCI support in kernel)
SNDCFG_PCI=`grep -E "^#define[ |\t]+CONFIG_PCI[ |\t]+1" $SNDCFG_KERNELDIR/include/linux/autoconf.h | wc -l`
SNDCFG_PCI=`expr $SNDCFG_PCI + 0`
AC_SUBST(SNDCFG_PCI)
if test $SNDCFG_PCI -eq 1; then
  AC_MSG_RESULT("yes")
else
  AC_MSG_RESULT("no")
fi

dnl Directory for modules
AC_MSG_CHECKING(for directory to store kernel modules)
AC_ARG_WITH(moddir,
  [  --with-moddir=/path     give the path for the alsa driver kernel modules]
  [                        [/lib/modules/<KVER>/misc]],
  moddir="$withval", 
# Special test for RH 5.1
  if test -d /lib/modules/preferred; then
    moddir="/lib/modules/preferred/misc"
  else
    moddir="/lib/modules/$kaversion/misc"
  fi
)
AC_SUBST(moddir)
AC_MSG_RESULT($moddir)

dnl Debug level
AC_MSG_CHECKING(for debug level)
AC_ARG_WITH(debug,
  [  --with-debug=level      give the debug level (none,basic,memory,full)],
  debug="$withval", debug="none")
case "$debug" in
  basic)
    AC_MSG_RESULT(basic)
    AC_DEFINE(SNDCFG_DEBUG)
    ;;
  memory)
    AC_MSG_RESULT(memory)
    AC_DEFINE(SNDCFG_DEBUG)
    AC_DEFINE(SNDCFG_DEBUG_MEMORY)
    ;;
  full)
    AC_MSG_RESULT(full)
    AC_DEFINE(SNDCFG_DEBUG)
    AC_DEFINE(SNDCFG_DEBUG_MEMORY)
    AC_DEFINE(SNDCFG_DEBUG_FULL)
    ;;    
  detect)
    AC_MSG_RESULT(detect)
    AC_DEFINE(SNDCFG_DEBUG)
    AC_DEFINE(SNDCFG_DEBUG_MEMORY)
    AC_DEFINE(SNDCFG_DEBUG_FULL)
    AC_DEFINE(SNDCFG_DEBUG_DETECT)
    ;;
  *)
    AC_MSG_RESULT(none)
    ;;
esac
AC_SUBST(moddir)

dnl Check pro processor type...
AC_MSG_CHECKING(for processor type)
AC_ARG_WITH(processor,
  [  --with-processor=cpu    give the processor type]
  [                        (i386,i486,i586,i686,alpha,ppc,auto)],
  processor="$withval", processor="auto")
if test "$processor" = "auto"; then
  CPUID=`cat /proc/cpuinfo | grep cpu | grep -v "cpu family" | grep -v cpuid | cut -d : -f 2 | colrm 1 1 | head -n 1`
  if test "$CPUID""x" = "x"; then
    CPUID=`cat /proc/cpuinfo | grep "cpu family" | cut -d : -f 2 | colrm 1 1 | head -n 1`
    if test "$CPUID" != "alpha" && test "$CPUID" != "Alpha"; then
      CPUID="i""$CPUID""86"
    fi
  else
    if test "$CPUID" != "alpha" && test "$CPUID" != "Alpha"; then
      CPUID="i""$CPUID"
    fi
  fi
  processor="$CPUID"
fi
c_opts=""
case "$processor" in
  i386)
    c_opts="-m386 -DCPU=386"
    AC_MSG_RESULT(i386)    
    ;;
  i486)
    c_opts="-m486 -DCPU=486"
    AC_MSG_RESULT(i486)    
    ;;
  i586)
    c_opts="-m486 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=586"
    AC_MSG_RESULT(i586)    
    ;;
  i686)
    c_opts="-m486 -malign-loops=2 -malign-jumps=2 -malign-functions=2 -DCPU=686"
    AC_MSG_RESULT(i686)    
    ;;
  alpha|Alpha)
    c_opts="-fno-strength-reduce -mno-fp-regs"
    if test "$newkernel" = "1"; then
      c_opts="$c_opts -ffixed-8"
    fi
    AC_MSG_RESULT(alpha)
    processor="alpha"
    ;;
  ppc)
    AC_MSG_RESULT(ppc)
    ;;
  *)
    AC_MSG_RESULT(unknown)
    processor="unknown"
    ;;
esac
c_opts="-O2 $c_opts"
AC_SUBST(processor)

dnl Check for SMP...
AC_MSG_CHECKING(for SMP)
AC_ARG_WITH(smp,
  [  --with-smp=yes,no,auto  driver will (not) be compiled with SMP support],
  smp="$withval", smp="auto")
msmp=""
if test "$smp" = "auto"; then
  CPUNUM=`grep -E "^SMP.+=.+1" $SNDCFG_KERNELDIR/Makefile`
  if test "$CPUNUM""x" = "x"; then
    CPUNUM=`cat /proc/cpuinfo | grep ^processor | wc -l`
    CPUNUM=`expr $CPUNUM + 0`
    if test $CPUNUM -gt 1; then
      msmp="1"
    fi
  else
    msmp="1"
  fi
fi
if test "$smp" = "yes"; then
  msmp="1"
fi
if test "$msmp" = "1"; then
  if test "$newkernel" = "1"; then
    GENKSYMS="$GENKSYMS -p smp_"
  fi
  c_opts="$c_opts -D__SMP__"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
AC_SUBST(msmp)

dnl Check for ISA PnP driver...
AC_MSG_CHECKING(for ISA PnP driver)
AC_ARG_WITH(isapnp,
  [  --with-isapnp=yes,no,auto  driver will (not) be compiled with ISA PnP support],
  pnp="$withval", pnp="auto")
mpnp=""
if test "$pnp" = "auto"; then
  if test -f /proc/isapnp; then
    mpnp="1"
  fi
else
  if test "$pnp" = "yes"; then
    mpnp="1"
  fi
fi
if test "$mpnp" = "1"; then
  AC_DEFINE(SNDCFG_ISAPNP)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Check for version...
AC_MSG_CHECKING(for driver version)
SND_VERSION=`cat $srcdir/version`
AC_DEFINE_UNQUOTED(SND_VERSION, "$SND_VERSION")
AC_SUBST(SND_VERSION)
AC_MSG_RESULT($SND_VERSION)

dnl Some late substitutes...
c_opts="$c_opts -DLINUX"
AC_SUBST(c_opts)
AC_SUBST(GENKSYMS)

dnl Output files...
AC_OUTPUT(Makefile.conf snddevices utils/alsa-driver.spec)

dnl Make right rights for scripts
chmod 755 $srcdir/snddevices
