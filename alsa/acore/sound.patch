--- ../alsa-kernel/core/sound.c	2006-01-03 20:49:01.000000000 +0100
+++ sound.c	2006-01-03 20:49:49.000000000 +0100
@@ -63,7 +63,15 @@
 static struct snd_minor *snd_minors[SNDRV_OS_MINORS];
 static DECLARE_MUTEX(sound_mutex);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 2)
+#ifdef CONFIG_SND_HAVE_CLASS_SIMPLE
+extern struct class_simple *sound_class;
+#else
 extern struct class *sound_class;
+#endif
+#else
+#define sound_class NULL
+#endif
 
 
 #ifdef CONFIG_KMOD
@@ -176,7 +184,9 @@
 
 static struct file_operations snd_fops =
 {
+#ifndef LINUX_2_2
 	.owner =	THIS_MODULE,
+#endif
 	.open =		snd_open
 };
 
@@ -274,7 +284,11 @@
 		devfs_mk_cdev(MKDEV(major, minor), S_IFCHR | device_mode, "snd/%s", name);
 	if (card)
 		device = card->dev;
+#ifdef CONFIG_SND_HAVE_CLASS_SIMPLE
+	class_simple_device_add(sound_class, MKDEV(major, minor), device, name);
+#else
 	class_device_create(sound_class, NULL, MKDEV(major, minor), device, "%s", name);
+#endif
 
 	up(&sound_mutex);
 	return 0;
@@ -312,7 +326,11 @@
 	if (mptr->type != SNDRV_DEVICE_TYPE_CONTROL ||
 	    mptr->card >= cards_limit)			/* created in sound.c */
 		devfs_remove("snd/%s", mptr->name);
+#ifdef CONFIG_SND_HAVE_CLASS_SIMPLE
+	class_simple_device_remove(MKDEV(major, minor));
+#else
 	class_device_destroy(sound_class, MKDEV(major, minor));
+#endif
 
 	snd_minors[minor] = NULL;
 	up(&sound_mutex);
@@ -403,6 +421,19 @@
  *  INIT PART
  */
 
+#ifdef CONFIG_SND_DEBUG_MEMORY
+extern void snd_memory_done(void);
+#else
+#define snd_memory_done()
+#endif
+#if defined(CONFIG_SND_DEBUG_MEMORY) && defined(CONFIG_PROC_FS)
+extern int snd_memory_info_init(void);
+extern void snd_memory_info_done(void);
+#else
+#define snd_memory_info_init()
+#define snd_memory_info_done()
+#endif
+
 static int __init alsa_sound_init(void)
 {
 	short controlnum;
@@ -418,14 +449,19 @@
 	if (snd_info_init() < 0) {
 		unregister_chrdev(major, "alsa");
 		devfs_remove("snd");
+		snd_memory_done();
 		return -ENOMEM;
 	}
+	snd_memory_info_init();
 	snd_info_minor_register();
 	for (controlnum = 0; controlnum < cards_limit; controlnum++)
 		devfs_mk_cdev(MKDEV(major, controlnum<<5), S_IFCHR | device_mode, "snd/controlC%d", controlnum);
 #ifndef MODULE
 	printk(KERN_INFO "Advanced Linux Sound Architecture Driver Version " CONFIG_SND_VERSION CONFIG_SND_DATE ".\n");
 #endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0) && defined(CONFIG_APM)
+	pm_init();
+#endif
 	return 0;
 }
 
@@ -437,10 +473,15 @@
 		devfs_remove("snd/controlC%d", controlnum);
 
 	snd_info_minor_unregister();
+	snd_memory_info_done();
 	snd_info_done();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0) && defined(CONFIG_APM)
+	pm_done();
+#endif
 	if (unregister_chrdev(major, "alsa") != 0)
 		snd_printk(KERN_ERR "unable to unregister major device number %d\n", major);
 	devfs_remove("snd");
+	snd_memory_done();
 }
 
 module_init(alsa_sound_init)
@@ -533,3 +574,5 @@
 #if defined(CONFIG_SND_DEBUG) && defined(CONFIG_SND_VERBOSE_PRINTK)
 EXPORT_SYMBOL(snd_verbose_printd);
 #endif
+
+#include "sound.inc"
