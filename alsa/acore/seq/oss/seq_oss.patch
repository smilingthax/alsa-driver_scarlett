--- ../../../alsa-kernel/core/seq/oss/seq_oss.c	2011-11-08 07:59:20.000000000 +0100
+++ seq_oss.c	2012-07-19 14:00:50.000000000 +0200
@@ -1,3 +1,4 @@
+#include "adriver.h"
 /*
  * OSS compatible sequencer driver
  *
@@ -21,6 +22,7 @@
  */
 
 #include <linux/init.h>
+#include <linux/smp_lock.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
 #include <sound/core.h>
@@ -190,12 +192,25 @@
 	return snd_seq_oss_ioctl(dp, cmd, arg);
 }
 
-#ifdef CONFIG_COMPAT
+#if defined(CONFIG_COMPAT) && defined(CONFIG_SND_HAVE_NEW_IOCTL)
 #define odev_ioctl_compat	odev_ioctl
 #else
 #define odev_ioctl_compat	NULL
 #endif
 
+#ifndef CONFIG_SND_HAVE_NEW_IOCTL
+/* need to unlock BKL to allow preemption */
+static int odev_ioctl_old(struct inode *inode, struct file * file,
+			  unsigned int cmd, unsigned long arg)
+{
+	int err;
+	unlock_kernel();
+	err = odev_ioctl(file, cmd, arg);
+	lock_kernel();
+	return err;
+}
+#endif
+
 static unsigned int
 odev_poll(struct file *file, poll_table * wait)
 {
@@ -218,8 +233,12 @@
 	.open =		odev_open,
 	.release =	odev_release,
 	.poll =		odev_poll,
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 	.unlocked_ioctl =	odev_ioctl,
 	.compat_ioctl =	odev_ioctl_compat,
+#else
+	.ioctl =	odev_ioctl_old,
+#endif
 	.llseek =	noop_llseek,
 };
 
@@ -310,3 +329,5 @@
 	info_entry = NULL;
 }
 #endif /* CONFIG_PROC_FS */
+
+EXPORT_NO_SYMBOLS;
