--- ../alsa-kernel/core/init.c	2006-12-14 11:41:13.000000000 +0100
+++ init.c	2006-12-15 14:00:13.000000000 +0100
@@ -1,3 +1,4 @@
+#define __NO_VERSION__
 /*
  *  Initialization routines
  *  Copyright (c) by Jaroslav Kysela <perex@suse.cz>
@@ -222,11 +223,19 @@
 	return POLLERR | POLLNVAL;
 }
 
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 static long snd_disconnect_ioctl(struct file *file,
 				 unsigned int cmd, unsigned long arg)
 {
 	return -ENODEV;
 }
+#else
+static int snd_disconnect_ioctl_old(struct inode *inode, struct file *file,
+				    unsigned int cmd, unsigned long arg)
+{
+	return -ENODEV;
+}
+#endif
 
 static int snd_disconnect_mmap(struct file *file, struct vm_area_struct *vma)
 {
@@ -240,16 +249,22 @@
 
 static struct file_operations snd_shutdown_f_ops =
 {
+#ifndef LINUX_2_2
 	.owner = 	THIS_MODULE,
+#endif
 	.llseek =	snd_disconnect_llseek,
 	.read = 	snd_disconnect_read,
 	.write =	snd_disconnect_write,
 	.release =	snd_disconnect_release,
 	.poll =		snd_disconnect_poll,
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 	.unlocked_ioctl = snd_disconnect_ioctl,
 #ifdef CONFIG_COMPAT
 	.compat_ioctl = snd_disconnect_ioctl,
 #endif
+#else
+	.ioctl =	snd_disconnect_ioctl_old,
+#endif
 	.mmap =		snd_disconnect_mmap,
 	.fasync =	snd_disconnect_fasync
 };
@@ -361,8 +376,10 @@
 		snd_printk(KERN_WARNING "unable to free card info\n");
 		/* Not fatal error */
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 20)
 	if (card->dev)
 		device_unregister(card->dev);
+#endif
 	kfree(card);
 	return 0;
 }
@@ -497,12 +514,14 @@
 	int err;
 
 	snd_assert(card != NULL, return -EINVAL);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 20)
 	if (!card->dev) {
 		card->dev = device_create(sound_class, card->parent, 0,
 					  "card%i", card->number);
 		if (IS_ERR(card->dev))
 			card->dev = NULL;
 	}
+#endif
 	if ((err = snd_device_register_all(card)) < 0)
 		return err;
 	mutex_lock(&snd_card_mutex);
