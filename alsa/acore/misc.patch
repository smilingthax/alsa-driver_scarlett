--- ../alsa-kernel/core/misc.c	2012-08-03 13:00:50.000000000 +0200
+++ misc.c	2012-08-03 13:05:22.000000000 +0200
@@ -1,3 +1,9 @@
+#define __NO_VERSION__
+#include "adriver.h"
+#ifndef KERN_DEFAULT
+#define KERN_DEFAULT	""
+#endif
+
 /*
  *  Misc and compatibility things
  *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>
@@ -45,7 +51,7 @@
 {
 	if (res) {
 		release_resource(res);
-		kfree(res);
+		kfree_nocheck(res);
 	}
 }
 
@@ -60,18 +66,65 @@
 	else
 		return path;
 }
+/* print file and line with a certain printk prefix */
+static int print_snd_pfx(unsigned int level, const char *path, int line,
+			 const char *format)
+{
+	const char *file = sanity_file_name(path);
+	char tmp[] = "<0>";
+	const char *pfx = level ? KERN_DEBUG : KERN_DEFAULT;
+	int ret = 0;
+
+	if (format[0] == '<' && format[2] == '>') {
+		tmp[1] = format[1];
+		pfx = tmp;
+		ret = 1;
+	}
+	printk("%sALSA %s:%d: ", pfx, file, line);
+	return ret;
+}
+#else
+#define print_snd_pfx(level, path, line, format)	0
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 6, 0)
+static inline int printk_get_level(const char *buffer)
+{
+	if (buffer[0] == '<' && buffer[1]) {
+		switch (buffer[1]) {
+		case '0' ... '7':
+		case 'd':	/* KERN_DEFAULT */
+			return buffer[1];
+		}
+	}
+	return 0;
+}
+
+static inline const char *printk_skip_level(const char *buffer)
+{
+	if (printk_get_level(buffer)) {
+		switch (buffer[1]) {
+		case '0' ... '7':
+		case 'd':	/* KERN_DEFAULT */
+			return buffer + 2;
+		}
+	}
+	return buffer;
+}
+#endif /* < 3.6.0 */
+
 #if defined(CONFIG_SND_DEBUG) || defined(CONFIG_SND_VERBOSE_PRINTK)
 void __snd_printk(unsigned int level, const char *path, int line,
 		  const char *format, ...)
 {
 	va_list args;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
 #ifdef CONFIG_SND_VERBOSE_PRINTK
 	int kern_level;
 	struct va_format vaf;
 	char verbose_fmt[] = KERN_DEFAULT "ALSA %s:%d %pV";
 #endif
+#endif
 
 #ifdef CONFIG_SND_DEBUG
 	if (debug < level)
@@ -79,6 +132,11 @@
 #endif
 
 	va_start(args, format);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 36)
+	if (print_snd_pfx(level, path, line, format))
+		format += 3; /* skip the printk level-prefix */
+	vprintk(format, args);
+#else
 #ifdef CONFIG_SND_VERBOSE_PRINTK
 	vaf.fmt = format;
 	vaf.va = &args;
@@ -96,6 +154,7 @@
 	vprintk(format, args);
 #endif
 	va_end(args);
+#endif /* < 2.6.36 */
 }
 EXPORT_SYMBOL_GPL(__snd_printk);
 #endif
@@ -145,9 +204,42 @@
 const struct snd_pci_quirk *
 snd_pci_quirk_lookup(struct pci_dev *pci, const struct snd_pci_quirk *list)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 3, 0)
 	return snd_pci_quirk_lookup_id(pci->subsystem_vendor,
 				       pci->subsystem_device,
 				       list);
+#else
+	unsigned short subsystem_vendor, subsystem_device;
+	pci_read_config_word(pci, PCI_SUBSYSTEM_VENDOR_ID, &subsystem_vendor);
+	pci_read_config_word(pci, PCI_SUBSYSTEM_ID, &subsystem_device);
+	return snd_pci_quirk_lookup_id(subsystem_vendor,
+				       subsystem_device,
+				       list);
+#endif
 }
 EXPORT_SYMBOL(snd_pci_quirk_lookup);
 #endif
+
+/* just for compatibility reason */
+void snd_verbose_printk(const char *file, int line, const char *format, ...)
+{
+	va_list args;
+	va_start(args, format);
+	if (print_snd_pfx(0, file, line, format))
+		format += 3; /* skip the printk level-prefix */
+	vprintk(format, args);
+	va_end(args);
+}
+EXPORT_SYMBOL(snd_verbose_printk);
+
+void snd_verbose_printd(const char *file, int line, const char *format, ...)
+{
+	va_list args;
+	va_start(args, format);
+	if (print_snd_pfx(1, file, line, format))
+		format += 3; /* skip the printk level-prefix */
+	vprintk(format, args);
+	va_end(args);
+
+}
+EXPORT_SYMBOL(snd_verbose_printd);
