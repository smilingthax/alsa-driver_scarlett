--- ../alsa-kernel/core/control.c	2012-03-13 08:11:22.000000000 +0100
+++ control.c	2012-07-19 13:58:13.000000000 +0200
@@ -1,3 +1,5 @@
+#define __NO_VERSION__
+#include "adriver.h"
 /*
  *  Routines for driver control interface
  *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>
@@ -21,6 +23,7 @@
 
 #include <linux/threads.h>
 #include <linux/interrupt.h>
+#include <linux/smp_lock.h>
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
@@ -845,6 +848,10 @@
 	return result;
 }
 
+#ifdef CONFIG_SND_BIT32_EMUL_MODULE
+EXPORT_SYMBOL(snd_ctl_elem_read);
+#endif
+
 static int snd_ctl_elem_read_user(struct snd_card *card,
 				  struct snd_ctl_elem_value __user *_control)
 {
@@ -901,6 +908,10 @@
 	return result;
 }
 
+#ifdef CONFIG_SND_BIT32_EMUL_MODULE
+EXPORT_SYMBOL(snd_ctl_elem_write);
+#endif
+
 static int snd_ctl_elem_write_user(struct snd_ctl_file *file,
 				   struct snd_ctl_elem_value __user *_control)
 {
@@ -1561,12 +1572,25 @@
 /*
  * ioctl32 compat
  */
-#ifdef CONFIG_COMPAT
+#if defined(CONFIG_COMPAT) && defined(CONFIG_SND_HAVE_NEW_IOCTL)
 #include "control_compat.c"
 #else
 #define snd_ctl_ioctl_compat	NULL
 #endif
 
+#ifndef CONFIG_SND_HAVE_NEW_IOCTL
+/* need to unlock BKL to allow preemption */
+static int snd_ctl_ioctl_old(struct inode *inode, struct file * file,
+			     unsigned int cmd, unsigned long arg)
+{
+	int err;
+	unlock_kernel();
+	err = snd_ctl_ioctl(file, cmd, arg);
+	lock_kernel();
+	return err;
+}
+#endif
+
 /*
  *  INIT PART
  */
@@ -1578,9 +1602,13 @@
 	.open =		snd_ctl_open,
 	.release =	snd_ctl_release,
 	.llseek =	no_llseek,
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 	.poll =		snd_ctl_poll,
 	.unlocked_ioctl =	snd_ctl_ioctl,
 	.compat_ioctl =	snd_ctl_ioctl_compat,
+#else
+	.ioctl =	snd_ctl_ioctl_old,
+#endif
 	.fasync =	snd_ctl_fasync,
 };
 
