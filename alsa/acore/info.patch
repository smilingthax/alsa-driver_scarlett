--- ../alsa-kernel/core/info.c	2012-09-04 11:39:35.761858131 +0200
+++ info.c	2012-09-04 13:03:53.282726986 +0200
@@ -1,3 +1,7 @@
+#define __NO_VERSION__
+#include "adriver.h"
+#include "alsa-autoconf.h"
+
 /*
  *  Information interface for ALSA driver
  *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>
@@ -89,10 +93,18 @@
 	char *nbuf;
 
 	nsize = PAGE_ALIGN(nsize);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 22) || \
+	defined(CONFIG_SND_DEBUG_MEMORY)
+	nbuf = kmalloc(nsize, GFP_KERNEL);
+	if (!nbuf)
+		return -ENOMEM;
+	memcpy(nbuf, buffer->buffer, buffer->len);
+	kfree(buffer->buffer);
+#else	
 	nbuf = krealloc(buffer->buffer, nsize, GFP_KERNEL);
 	if (! nbuf)
 		return -ENOMEM;
-
+#endif
 	buffer->buffer = nbuf;
 	buffer->len = nsize;
 	return 0;
@@ -494,9 +506,26 @@
 	return -ENOTTY;
 }
 
+#ifndef CONFIG_SND_HAVE_NEW_IOCTL
+/* need to unlock BKL to allow preemption */
+static int snd_info_entry_ioctl_old(struct inode *inode, struct file * file,
+				    unsigned int cmd, unsigned long arg)
+{
+	int err;
+	unlock_kernel();
+	err = snd_info_entry_ioctl(file, cmd, arg);
+	lock_kernel();
+	return err;
+}
+#endif
+
 static int snd_info_entry_mmap(struct file *file, struct vm_area_struct *vma)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 20)
 	struct inode *inode = file->f_path.dentry->d_inode;
+#else
+	struct inode *inode = file->f_dentry->d_inode;
+#endif
 	struct snd_info_private_data *data;
 	struct snd_info_entry *entry;
 
@@ -522,7 +551,11 @@
 	.read =			snd_info_entry_read,
 	.write =		snd_info_entry_write,
 	.poll =			snd_info_entry_poll,
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 	.unlocked_ioctl =	snd_info_entry_ioctl,
+#else
+	.ioctl =		snd_info_entry_ioctl_old,
+#endif
 	.mmap =			snd_info_entry_mmap,
 	.open =			snd_info_entry_open,
 	.release =		snd_info_entry_release,
@@ -985,9 +1018,20 @@
 
 static void snd_info_version_read(struct snd_info_entry *entry, struct snd_info_buffer *buffer)
 {
+	static char *kernel_version = UTS_RELEASE;
+
 	snd_iprintf(buffer,
-		    "Advanced Linux Sound Architecture Driver Version k%s.\n",
-		    init_utsname()->release);
+		    "Advanced Linux Sound Architecture Driver Version "
+		    CONFIG_SND_VERSION ".\n"
+		    "Compiled on " __DATE__ " for kernel %s"
+#ifdef CONFIG_SMP
+		    " (SMP)"
+#endif
+#ifdef MODVERSIONS
+		    " with versioned symbols"
+#endif
+		    ".\n", kernel_version
+		    );
 }
 
 static int __init snd_info_version_init(void)
