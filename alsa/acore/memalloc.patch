--- memalloc.c	2004-03-06 17:00:36.556407787 +0100
+++ memalloc.c	2004-03-06 17:00:32.107418149 +0100
@@ -1,3 +1,4 @@
+#include "memalloc.inc"
 /*
  *  Copyright (c) by Jaroslav Kysela <perex@suse.cz>
  *                   Takashi Iwai <tiwai@suse.de>
@@ -89,6 +90,7 @@
  *  Hacks
  */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 static void *snd_dma_alloc_coherent1(struct device *dev, size_t size,
 				     dma_addr_t *dma_handle, int flags)
 {
@@ -112,7 +114,15 @@
 #undef dma_free_coherent
 #define dma_free_coherent snd_dma_free_coherent1
 
+#else
+
+/* for 2.2/2.4 kernels */
+#define dma_alloc_coherent(dev,size,addr,flags) pci_alloc_consistent((struct pci_dev *)(dev),size,addr)
+#define dma_free_coherent(dev,size,ptr,addr) pci_free_consistent((struct pci_dev *)(dev),size,ptr,addr)
 
+#endif /* >= 2.6.0 */
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 4, 0)
 #if defined(__i386__) || defined(__ppc__) || defined(__x86_64__)
 
 /*
@@ -136,13 +146,29 @@
 {
 	void *ret;
 	u64 dma_mask;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 0)
+	struct pci_dev *pci = (struct pci_dev *)dev;
+#endif
 
-	if (dev == NULL || !dev->dma_mask)
+	if (dev == NULL
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
+	    || !dev->dma_mask
+#endif
+	    )
 		return dma_alloc_coherent(dev, size, dma_handle, flags);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	dma_mask = *dev->dma_mask;
 	*dev->dma_mask = 0xffffffff; 	/* do without masking */
+#else
+	dma_mask = pci->dma_mask;
+	pci->dma_mask = 0xffffffff; 	/* do without masking */
+#endif
 	ret = dma_alloc_coherent(dev, size, dma_handle, flags);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	*dev->dma_mask = dma_mask;	/* restore */
+#else
+	pci->dma_mask = dma_mask;	/* restore */
+#endif
 	if (ret) {
 		/* obtained address is out of range? */
 		if (((unsigned long)*dma_handle + size - 1) & ~dma_mask) {
@@ -163,6 +189,8 @@
 #define dma_alloc_coherent snd_dma_hack_alloc_coherent
 
 #endif /* arch */
+#endif /* >= 2.4.0 */
+
 
 /*
  *
@@ -797,9 +825,24 @@
 		case SNDRV_DMA_TYPE_DEV:
 		case SNDRV_DMA_TYPE_DEV_SG:
 			if (mem->dev.dev) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 				len += sprintf(page + len, "%s [%s]",
 					       mem->dev.type == SNDRV_DMA_TYPE_DEV_SG ? "DEV-SG" : "DEV",
 					       mem->dev.dev->bus_id);
+#else
+				struct pci_dev *pci = (struct pci_dev *)mem->dev.dev;
+				len += sprintf(page + len, "%s ",
+					       mem->dev.type == SNDRV_DMA_TYPE_DEV_SG ? "PCI-SG" : "PCI");
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 4, 0)
+				len += sprintf(page + len, "[%02x:%02x:%02x]",
+					       pci->bus->number,
+					       pci->bus->primary,
+					       pci->bus->secondary);
+#else
+				len += sprintf(page + len, "[%s]",
+					       pci->slot_name);
+#endif /* < 2.4.0 */
+#endif
 			} else
 				len += sprintf(page + len, "ISA");
 			break;
@@ -875,3 +918,5 @@
 EXPORT_SYMBOL(snd_malloc_pages);
 EXPORT_SYMBOL(snd_malloc_pages_fallback);
 EXPORT_SYMBOL(snd_free_pages);
+
+#include "memalloc.inc1"
