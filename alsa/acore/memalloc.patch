--- memalloc.c	2003-11-20 12:44:06.000000000 +0100
+++ memalloc.c	2003-11-20 12:52:50.000000000 +0100
@@ -1,3 +1,4 @@
+#include "memalloc.inc"
 /*
  *  Copyright (c) by Jaroslav Kysela <perex@suse.cz>
  *                   Takashi Iwai <tiwai@suse.de>
@@ -73,6 +74,7 @@
 #define snd_assert(expr, args...) /**/
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 4, 0)
 #ifdef CONFIG_PCI
 #if defined(__i386__) || defined(__ppc__) || defined(__x86_64__)
 #define HACK_PCI_ALLOC_CONSISTENT
@@ -94,16 +96,25 @@
 				    dma_addr_t *dma_handle)
 {
 	void *ret;
-	u64 dma_mask;
+	u64 dma_mask = 0xffffffff, dma_mask1;
 	unsigned long mask;
 
 	if (hwdev == NULL)
 		return pci_alloc_consistent(hwdev, size, dma_handle);
+#ifdef CONFIG_HAVE_PCI_CONSISTENT_DMA_MASK
 	dma_mask = hwdev->consistent_dma_mask;
-	mask = (unsigned long)dma_mask;
+#endif
+	dma_mask1 = hwdev->dma_mask;
+	mask = (unsigned long)(dma_mask & dma_mask1);
+#ifdef CONFIG_HAVE_PCI_CONSISTENT_DMA_MASK
 	hwdev->consistent_dma_mask = 0xffffffff; /* do without masking */
+#endif
+	hwdev->dma_mask = 0xffffffff; /* do without masking */
 	ret = pci_alloc_consistent(hwdev, size, dma_handle);
+#ifdef CONFIG_HAVE_PCI_CONSISTENT_DMA_MASK
 	hwdev->consistent_dma_mask = dma_mask; /* restore */
+#endif
+	hwdev->dma_mask = dma_mask1; /* restore */
 	if (ret) {
 		/* obtained address is out of range? */
 		if (((unsigned long)*dma_handle + size - 1) & ~mask) {
@@ -125,6 +136,7 @@
 
 #endif /* arch */
 #endif /* CONFIG_PCI */
+#endif /* LINUX >= 2.4.0 */
 
 
 /*
@@ -617,7 +629,7 @@
 }
 
 
-#if defined(__i386__)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 4, 0) && defined(__i386__)
 /*
  * on ix86, we allocate a page with GFP_KERNEL to assure the
  * allocation.  the code is almost same with kernel/i386/pci-dma.c but
@@ -642,7 +654,11 @@
 	dma_addr_t addr;
 	unsigned long mask;
 
+#ifdef CONFIG_HAVE_PCI_CONSISTENT_DMA_MASK
 	mask = pci ? (unsigned long)pci->consistent_dma_mask : 0x00ffffffUL;
+#else
+	mask = pci ? (unsigned long)pci->dma_mask : 0x00ffffffUL;
+#endif
 	ptr = (void *)__get_free_page(GFP_KERNEL);
 	if (ptr) {
 		addr = virt_to_phys(ptr);
@@ -997,3 +1013,5 @@
 EXPORT_SYMBOL(snd_malloc_sbus_pages_fallback);
 EXPORT_SYMBOL(snd_free_sbus_pages);
 #endif
+
+#include "memalloc.inc1"
