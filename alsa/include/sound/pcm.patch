--- ../../alsa-kernel/include/pcm.h	2010-01-07 13:57:18.000000000 +0100
+++ pcm.h	2010-01-07 13:57:01.000000000 +0100
@@ -271,9 +271,15 @@
 	int overrange;
 	snd_pcm_uframes_t avail_max;
 	snd_pcm_uframes_t hw_ptr_base;	/* Position at buffer restart */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
+	unsigned long old_hw_ptr_interrupt; /* for KABI compatibility */
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
 	unsigned long hw_ptr_jiffies;	/* Time when hw_ptr is updated */
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31)
 	snd_pcm_sframes_t delay;	/* extra delay; typically FIFO size */
-
+#endif
 	/* -- HW params -- */
 	snd_pcm_access_t access;	/* access mode */
 	snd_pcm_format_t format;	/* SNDRV_PCM_FORMAT_* */
@@ -283,6 +289,9 @@
 	snd_pcm_uframes_t period_size;	/* period size */
 	unsigned int periods;		/* periods */
 	snd_pcm_uframes_t buffer_size;	/* buffer size */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
+	unsigned int old_tick_time;	/* for ABI compatibility */
+#endif
 	snd_pcm_uframes_t min_align;	/* Min alignment for the format */
 	size_t byte_align;
 	unsigned int frame_bits;
@@ -294,6 +303,10 @@
 	/* -- SW params -- */
 	int tstamp_mode;		/* mmap timestamp is updated */
   	unsigned int period_step;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
+	unsigned int old_sleep_min;	/* for ABI compatibility */
+	snd_pcm_uframes_t old_xfer_align; /* for ABI compatibility */
+#endif
 	snd_pcm_uframes_t start_threshold;
 	snd_pcm_uframes_t stop_threshold;
 	snd_pcm_uframes_t silence_threshold; /* Silence filling happens when
@@ -311,8 +324,13 @@
 	struct snd_pcm_mmap_control *control;
 
 	/* -- locking / scheduling -- */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 33)
 	unsigned int nowake: 1;		/* no wakeup (data-copy in progress) */
+#endif
 	wait_queue_head_t sleep;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
+	struct timer_list old_tick_timer;	/* for ABI compatibility */
+#endif
 	struct fasync_struct *fasync;
 
 	/* -- private section -- */
@@ -329,8 +347,9 @@
 
 	/* -- timer -- */
 	unsigned int timer_resolution;	/* timer resolution */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)
 	int tstamp_type;		/* timestamp type */
-
+#endif
 	/* -- DMA -- */           
 	unsigned char *dma_area;	/* DMA area */
 	dma_addr_t dma_addr;		/* physical bus address (not accessible from main CPU) */
@@ -346,6 +365,20 @@
 #ifdef CONFIG_SND_PCM_XRUN_DEBUG
 	struct snd_pcm_hwptr_log *hwptr_log;
 #endif
+
+	/* appended below for ABI compatibility */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 30)
+	unsigned long hw_ptr_jiffies;	/* Time when hw_ptr is updated */
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 31)
+	snd_pcm_sframes_t delay;	/* extra delay; typically FIFO size */
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 25)
+	int tstamp_type;		/* timestamp type */
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
+	unsigned int nowake: 1;		/* no wakeup (data-copy in progress) */
+#endif
 };
 
 struct snd_pcm_group {		/* keep linked substreams */
@@ -375,6 +408,9 @@
         /* -- timer section -- */
 	struct snd_timer *timer;		/* timer */
 	unsigned timer_running: 1;	/* time is running */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 30)
+	spinlock_t already_dead_timer_lock; /* just place holder */
+#endif
 	/* -- next substream -- */
 	struct snd_pcm_substream *next;
 	/* -- linked substreams -- */
