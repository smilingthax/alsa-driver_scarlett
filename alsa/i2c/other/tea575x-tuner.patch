--- tea575x-tuner.c
+++ tea575x-tuner.c
@@ -1,3 +1,4 @@
+#include "adriver.h"
 /*
  *   ALSA driver for TEA5757/5759 Philips AM/FM radio tuner chips
  *
@@ -255,6 +256,7 @@ static int vidioc_s_audio(struct file *file, void *priv,
 	return 0;
 }
 
+#ifdef CONFIG_HAVE_V4L2_CTRLS
 static int tea575x_s_ctrl(struct v4l2_ctrl *ctrl)
 {
 	struct snd_tea575x *tea = container_of(ctrl->handler, struct snd_tea575x, ctrl_handler);
@@ -269,8 +271,97 @@ static int tea575x_s_ctrl(struct v4l2_ctrl *ctrl)
 	return -EINVAL;
 }
 
+#else /* !CONFIG_HAVE_V4L2_CTRLS */
+static struct v4l2_queryctrl radio_qctrl[] = {
+	{
+		.id            = V4L2_CID_AUDIO_MUTE,
+		.name          = "Mute",
+		.minimum       = 0,
+		.maximum       = 1,
+		.default_value = 1,
+		.type          = V4L2_CTRL_TYPE_BOOLEAN,
+	}
+};
+
+static int vidioc_queryctrl(struct file *file, void *priv,
+					struct v4l2_queryctrl *qc)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(radio_qctrl); i++) {
+		if (qc->id && qc->id == radio_qctrl[i].id) {
+			memcpy(qc, &(radio_qctrl[i]),
+						sizeof(*qc));
+			return 0;
+		}
+	}
+	return -EINVAL;
+}
+
+static int vidioc_g_ctrl(struct file *file, void *priv,
+					struct v4l2_control *ctrl)
+{
+	struct snd_tea575x *tea = video_drvdata(file);
+
+	switch (ctrl->id) {
+	case V4L2_CID_AUDIO_MUTE:
+		ctrl->value = tea->mute;
+		return 0;
+	}
+	return -EINVAL;
+}
+
+static int vidioc_s_ctrl(struct file *file, void *priv,
+					struct v4l2_control *ctrl)
+{
+	struct snd_tea575x *tea = video_drvdata(file);
+
+	switch (ctrl->id) {
+	case V4L2_CID_AUDIO_MUTE:
+		if (tea->mute != ctrl->value) {
+			tea->mute = ctrl->value;
+			snd_tea575x_set_freq(tea);
+		}
+		return 0;
+	}
+	return -EINVAL;
+}
+
+static int vidioc_g_input(struct file *filp, void *priv, unsigned int *i)
+{
+	*i = 0;
+	return 0;
+}
+
+static int vidioc_s_input(struct file *filp, void *priv, unsigned int i)
+{
+	if (i != 0)
+		return -EINVAL;
+	return 0;
+}
+
+static int snd_tea575x_exclusive_open(struct file *file)
+{
+	struct snd_tea575x *tea = video_drvdata(file);
+
+	return test_and_set_bit(0, &tea->in_use) ? -EBUSY : 0;
+}
+
+static int snd_tea575x_exclusive_release(struct file *file)
+{
+	struct snd_tea575x *tea = video_drvdata(file);
+
+	clear_bit(0, &tea->in_use);
+	return 0;
+}
+#endif /* CONFIG_HAVE_V4L2_CTRLS */
+
 static const struct v4l2_file_operations tea575x_fops = {
 	.owner		= THIS_MODULE,
+#ifndef CONFIG_HAVE_V4L2_CTRLS
+	.open           = snd_tea575x_exclusive_open,
+	.release        = snd_tea575x_exclusive_release,
+#endif
 	.unlocked_ioctl	= video_ioctl2,
 };
 
@@ -282,18 +373,35 @@ static const struct v4l2_ioctl_ops tea575x_ioctl_ops = {
 	.vidioc_s_audio     = vidioc_s_audio,
 	.vidioc_g_frequency = vidioc_g_frequency,
 	.vidioc_s_frequency = vidioc_s_frequency,
+#ifndef CONFIG_HAVE_V4L2_CTRLS
+	.vidioc_g_input     = vidioc_g_input,
+	.vidioc_s_input     = vidioc_s_input,
+	.vidioc_queryctrl   = vidioc_queryctrl,
+	.vidioc_g_ctrl      = vidioc_g_ctrl,
+	.vidioc_s_ctrl      = vidioc_s_ctrl,
+#endif
 };
 
 static struct video_device tea575x_radio = {
 	.name           = "tea575x-tuner",
 	.fops           = &tea575x_fops,
 	.ioctl_ops 	= &tea575x_ioctl_ops,
+#ifdef CONFIG_HAVE_V4L2_CTRLS
 	.release	= video_device_release_empty,
+#else
+	.release	= video_device_release,
+#endif
 };
 
+
+#ifdef CONFIG_HAVE_V4L2_CTRLS
 static const struct v4l2_ctrl_ops tea575x_ctrl_ops = {
 	.s_ctrl = tea575x_s_ctrl,
 };
+#else
+#define v4l2_ctrl_handler_free(x)
+#define v4l2_ctrl_handler_setup(x)
+#endif
 
 /*
  * initialize all the tea575x chips
@@ -315,6 +423,7 @@ int snd_tea575x_init(struct snd_tea575x *tea)
 	tea->vd = tea575x_radio;
 	video_set_drvdata(&tea->vd, tea);
 	mutex_init(&tea->mutex);
+#ifdef CONFIG_HAVE_V4L2_CTRLS
 	tea->vd.lock = &tea->mutex;
 
 	v4l2_ctrl_handler_init(&tea->ctrl_handler, 1);
@@ -326,6 +435,9 @@ int snd_tea575x_init(struct snd_tea575x *tea)
 		v4l2_ctrl_handler_free(&tea->ctrl_handler);
 		return retval;
 	}
+#else
+	tea->in_use = 0;
+#endif
 
 	if (tea->ext_init) {
 		retval = tea->ext_init(tea);
