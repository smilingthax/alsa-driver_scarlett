--- ../../alsa-kernel/usb/usx2y/usbusx2y.c	2004-08-02 22:10:40.302811048 +0200
+++ usbusx2y.c	2004-08-02 22:36:33.296720088 +0200
@@ -1,3 +1,13 @@
+#include <linux/config.h>
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,5)
+#define SND_NEED_USB_SET_INTERFACE
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+#define SND_NEED_USB_WRAPPER
+#endif
+#endif
+
 /*
  * usbus428.c - ALSA USB US-428 Driver
  *
@@ -140,7 +150,11 @@
 /* 
  * pipe 4 is used for switching the lamps, setting samplerate, volumes ....   
  */
+#ifndef OLD_USB
 static void i_usX2Y_Out04Int(struct urb* urb, struct pt_regs *regs)
+#else
+static void i_usX2Y_Out04Int(struct urb* urb)
+#endif
 {
 #ifdef CONFIG_SND_DEBUG
 	if (urb->status) {
@@ -152,7 +166,11 @@
 #endif
 }
 
+#ifndef OLD_USB
 static void i_usX2Y_In04Int(struct urb* urb, struct pt_regs *regs)
+#else
+static void i_usX2Y_In04Int(struct urb* urb)
+#endif
 {
 	int			err = 0;
 	usX2Ydev_t		*usX2Y = urb->context;
@@ -212,6 +230,9 @@
 								  usb_sndbulkpipe(usX2Y->chip.dev, 0x04), &p4out->val.vol, 
 								  p4out->type == eLT_Light ? sizeof(us428_lights_t) : 5,
 								  i_usX2Y_Out04Int, usX2Y);
+#ifdef OLD_USB
+						usX2Y->AS04.urb[j]->transfer_flags = USB_QUEUE_BULK;
+#endif
 						err = usb_submit_urb(usX2Y->AS04.urb[j], GFP_ATOMIC);
 						us428ctls->p4outSent = send;
 						break;
@@ -223,8 +244,10 @@
 		snd_printk("In04Int() usb_submit_urb err=%i\n", err);
 	}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	urb->dev = usX2Y->chip.dev;
 	usb_submit_urb(urb, GFP_ATOMIC);
+#endif
 }
 
 /*
@@ -268,6 +291,9 @@
 			 usX2Y->In04Buf, 21,
 			 i_usX2Y_In04Int, usX2Y,
 			 10);
+#ifdef OLD_USB
+	usX2Y->In04urb->transfer_flags = USB_QUEUE_BULK;
+#endif
 	err = usb_submit_urb(usX2Y->In04urb, GFP_KERNEL);
 	return err;
 }
@@ -355,6 +381,7 @@
 	return card;
 }
 
+#ifndef OLD_USB
 /*
  * new 2.5 USB kernel API
  */
@@ -374,14 +401,34 @@
 	usX2Y_usb_disconnect(interface_to_usbdev(intf),
 				 dev_get_drvdata(&intf->dev));
 }
+#else
+/*
+ * 2.4 USB kernel API
+ */
+static void *snd_usX2Y_probe(struct usb_device *dev, unsigned int ifnum, const struct usb_device_id *id)
+{
+	return usX2Y_usb_probe(dev, usb_ifnum_to_if(dev, ifnum), id);
+}
+                                       
+static void snd_usX2Y_disconnect(struct usb_device *dev, void *ptr)
+{
+	usX2Y_usb_disconnect(dev, ptr);
+}
+#endif
 
 MODULE_DEVICE_TABLE(usb, snd_usX2Y_usb_id_table);
 static struct usb_driver snd_usX2Y_usb_driver = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 5, 70)	/* FIXME: find right number */
+ 	.owner =	THIS_MODULE,
+#endif
  	.owner =	THIS_MODULE,
 	.name =		"snd-usb-usx2y",
 	.probe =	snd_usX2Y_probe,
 	.disconnect =	snd_usX2Y_disconnect,
 	.id_table =	snd_usX2Y_usb_id_table,
+#ifdef OLD_USB
+	.driver_list =	LIST_HEAD_INIT(snd_usX2Y_usb_driver.driver_list), 
+#endif
 };
 
 static void snd_usX2Y_card_private_free(snd_card_t *card)
@@ -432,3 +479,5 @@
 
 module_init(snd_usX2Y_module_init)
 module_exit(snd_usX2Y_module_exit)
+
+EXPORT_NO_SYMBOLS;
