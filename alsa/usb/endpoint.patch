--- ../alsa-kernel/usb/endpoint.c	2013-04-29 11:45:04.798944327 +0200
+++ endpoint.c	2013-04-29 17:57:42.657941659 +0200
@@ -1,3 +1,5 @@
+#define __NO_VERSION__
+#include "usbaudio.inc"
 /*
  *   This program is free software; you can redistribute it and/or modify
  *   it under the terms of the GNU General Public License as published by
@@ -344,7 +346,11 @@
 /*
  * complete callback for urbs
  */
+#if !defined(OLD_USB) && !defined(CONFIG_SND_NEW_IRQ_HANDLER)
+static void snd_complete_urb(struct urb *urb, struct pt_regs *regs)
+#else
 static void snd_complete_urb(struct urb *urb)
+#endif
 {
 	struct snd_urb_ctx *ctx = urb->context;
 	struct snd_usb_endpoint *ep = ctx->ep;
@@ -530,6 +536,9 @@
 		if (test_bit(i, &ep->active_mask)) {
 			if (!test_and_set_bit(i, &ep->unlink_mask)) {
 				struct urb *u = ep->urb[i].urb;
+#ifdef URB_ASYNC_UNLINK
+				u->transfer_flags |= URB_ASYNC_UNLINK;
+#endif
 				usb_unlink_urb(u);
 			}
 		}
@@ -684,7 +693,11 @@
 		if (!u->urb->transfer_buffer)
 			goto out_of_memory;
 		u->urb->pipe = ep->pipe;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 8, 0)
+		u->urb->transfer_flags = URB_ISO_ASAP | URB_NO_TRANSFER_DMA_MAP;
+#else
 		u->urb->transfer_flags = URB_NO_TRANSFER_DMA_MAP;
+#endif
 		u->urb->interval = 1 << ep->datainterval;
 		u->urb->context = u;
 		u->urb->complete = snd_complete_urb;
@@ -723,7 +736,11 @@
 		u->urb->transfer_dma = ep->sync_dma + i * 4;
 		u->urb->transfer_buffer_length = 4;
 		u->urb->pipe = ep->pipe;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 8, 0)
+		u->urb->transfer_flags = URB_ISO_ASAP | URB_NO_TRANSFER_DMA_MAP;
+#else
 		u->urb->transfer_flags = URB_NO_TRANSFER_DMA_MAP;
+#endif
 		u->urb->number_of_packets = 1;
 		u->urb->interval = 1 << ep->syncinterval;
 		u->urb->context = u;
